<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.jerry.mapper.BackendOrderMapper">
    <!--  **标签说明**
         ①mapper的namespace需要匹配对应表的Dao层接口的全限定名称
         (全限定名称：也被称为引用<reference>指代：包名+类名)
         ②select表示查询语句，很简单，不多说，对应insert update...
         ③id需要填入的是Dao接口中对应的方法名称
         原理:mybatis会根据ID值来去Dao层接口找到对应要执行的sql语句的方法名称。
         ④resultType，故名思意，就是查询结果的返回类型，填入的是类(这里就是domain的User类
         )的全限定名称
         ⑤这一整个叫做什么什么mapper.xml的文件就是sql的映射文件
         必须要有的头部约束文件:
         <?xml version="1.0" encoding="UTF-8" ?>
        <!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

    -->


    <select id="getAllOrder" resultType="com.jerry.entity.BackendOrder">
        select o.*,s.shop_name
        from  orders o,shop s
        where o.shop_id = s.id
    </select>

    <update id="deliveryCommodity" parameterType="com.jerry.entity.BackendOrder">
        update orders
        set orders.status = #{status}
        where orders.id = #{oid}
    </update>

<!--    <insert id="addUser" parameterType="com.study.pojo.User">-->
<!--        insert into user (id, name, pwd)-->
<!--        values (#{id}, #{name}, #{pwd})-->
<!--    </insert>-->
<!--    <update id="updateUser" parameterType="com.study.pojo.User">-->
<!--        update user-->
<!--        set name=#{name},-->
<!--            pwd=#{pwd}-->
<!--        where id = #{id}-->
<!--    </update>-->
<!--    <delete id="delUser" parameterType="int">-->
<!--        delete-->
<!--        from user-->
<!--        where id = #{id}-->
<!--    </delete>-->

</mapper>